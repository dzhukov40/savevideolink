---
Ресурсы:

// оф сайт
- [     ]



---
элементы документа

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение
[*] - важное контекстное примечание
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку

---
краткое описание

- [описание]
  это будет сайт куда можно зайти и хранить ссылки на видео
  по которым открывается плеер и мы можем смотреть видео.

- [технологии]
  - сборка:
    - mvn
  - основной каркас
    - spring MVC
    - spring CORE
    - spring SECURITY
  - работа с базой
    - HIBERNATE
    - postgreSQL
    - liqubase
  - сервер разворачивания
    - jboss (*) WildFly
    - nginx (*) прячим ресты
  - способ разворачивания и настройки
    - ansible
  - тестирование
    - JUnit
  - front
    - Angular (*) уже есть 5-ый

- [архитектура]

  [ Angular ]                        (*) client
  |
  |
  [rest 1]...............[rest n]    (*) REST
  |
  |
  [front 1]..............[front n]   (*) Тут уже данные каккими общаемся с фронтом
  |
  |
  [service 1]............[service n] (*) Сервисы могут быть разного уровня и содержать
  .         .            .         .     в себе сервисы уровнем пониже
  .         .            .         .
  [service 1]............[service n] (*) в конце сервисы поменьше, не включащие другие сервисы в себя
  |
  |
  [DAO]                              (*) это подход к организации работы с данными в базе
  |
  |
  [Database Table]                   (*) таблички в базыле

#-----------------------------------------------


1) создаем проектик в идее [idea]
  - создаем папку для хранения проектика
  - создаем новый проект [File->new project]
  - выбираем [Maven]
  - ставим артифакты:
    - GroupId    [ ru.doneathome ]
    - ArtifactId [ savevideolink ]
    - Version    [ 1.0.0 ]
  - имя проектика [ savevideolink ]

2) настраиваем [git]
  - в IDEA открываем терминал
  - [ git --help | less ] - удобненько посмотрим что есть
  - [ git init ] - создаем локальный репозиторий
    - появилась папка [ .git ]
  - [ git status ] - посмотреть что мы отслеживаем, а что нет
    - видим файлы и они отмечены как не включенные
  - [ touch ./.gitignore ] - правила игнорирования изменений
    [ git status ] - смотри текущее состояние
    - сделаем простое содержимое :
      [
         /.idea
         *.iml
         /target
      ]
  - [ git add <файл/папка> ] - так добавляем все папки и файлы
    - (*) можно просто правой кнопкой на файл [git->add]
    [ git status ] - смотри текущее состояние
  - хотим настроить, чтобы комиты были от имени меня,
    тоесть пользователя с моим именем и @mail-ом.
    (*) параметр --global сделает настройку на уровне системы,
    а не только конкретно этого проекта, что для меня удобно.
    [ git config --global user.name "dzhukov40" ]
    [ git config --global user.email dzhukov40.v@mail.ru ]
    (*) проверяем -> [ git config --list ]
  - делаем первоначальный коммит с сообщением !
    [ git commit -m "First commit" ]
    (*) посмотреть историю коммитов -> [ git log ]
  - идем на [ github.com ] и создаем новый репозиторий
    назовем его как наш проект [groupID + artifactID]
    (*) например [ savevideolink ]
  - так-как мы уже создали локальный репозиторий, мы
    добавим его в наш локальный, а потом засинхронизируем
    [ git remote add origin <url.git> ] - добавляем
    (*) проверяем -> [ git config --list ]
    [ git push -u origin master ] - отправляем все,что есть
    в ветке мастера !
    (*) можем удалить удаленный репозиторий [ git remote remove origin ]
    (*) попросят имя user и password от [ github.com ]
    (*) идем на [github.com] и радуемся
  - хотим подружить IDEA и GIT
    (*) шок - они уже дружат)))


3) настраиваем [структура проекта] (*) будем дописывать тут при изменении!!!
  - [*] выкачали [searchwiz] для примера архитектуры приложения
    - собираем проектик
    - закидываем файл в директорию пакетов
      - [ mvn install:install-file -Dfile=<path-to-file> -DgroupId=<group-id> -DartifactId=<artifact-id> -Dversion=<version> -Dpackaging=<packaging> ]
      - запускаем в консоли mvn проекта [/home/dzhukov/work/3.3.0/development/searchwiz-parent]
      - [ mvn install:install-file -Dfile=../lib/ojdbc6-11.2.0.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0 -Dpackaging=jar ]
      - собираем рутовый проект [searchwiz: root] -> [ clean, insall ]
  - создали:
   - [ansible]: тут будет написаны скрипты развертывания
     - [distrib]: кроме дистрибутивов, еще положить артифакты проекта
  - [db]: разрабатываем тут базюлю
    - [liquibase]: накатывать базюлю будет через ликви
  - [development]: тут будут модули (*) весь код разобьем на модули
    - [*] создаем модуль в корне проекта потом перемещаем
      - создать надо сначала [savevideolink-parent] потом все новые модули
        указывать в нем !!
      - если модуль серинький в [maven] окне надо пкм [unignor modul]
    - [*] переименовали сам верхний проект в [savevideolink-root]
    - [*] надо в самом верхнем [pom.xml] написать
      - а в помник [parent] модули для него!
      [
        <modules>
          <module>development/savevideolink-parent</module>
        </modules>
      ]
    - [config]: тут будут все проперти нашего приложения [*.property]
      - эти настройки можно будет менять не перекомпилируя приложение
    - модуль [savevideolink-parent]: в этом модуле будет главный помник с версиями артифактов
    - модуль [savevideolink-base]: тут у нас основа
    - модуль [savevideolink-utill]: вспомогательные классы
    - модуль [savevideolink-web]: наш фронт (*)
    - модуль [savevideolink-dao-hibernate-spring]: описываем работу с базюлей.
      - тут получаем в итоге кучу сервисов работы через DAO с базюлей


4) настраиваем [структуру базы данных] (*) будем дописывать тут при изменении!!!
  - создали виртуалочку на убунте [savevideolink]
  - на виртуалку поставим [ postgresql ]
    - [*] [https://www.digitalocean.com/community/tutorials/postgresql-ubuntu-16-04-ru]
    - [ sudo apt install postgresql ]
      - разрешить с других ip конектиться:
        [
            - пробуем зайти на локальную базу
              - [ sudo netstat -natp | grep postgres ] получаем [ 5432 ]
              - [*] запустить если надо [ sudo service postgresql restart ]
            - По умолчанию соединения через TCP/IP заблокированы.
              - топаем [ cd /etc/postgresql/9.5/main/ ]
              - открываем [ sudo vim ./postgresql.conf ]
              - раскоменчиваем [ listen_address ] и можем поставить '0.0.0.0'
              - заходим вот так, заметь что ключ для sudo
                - заходим [ sudo -u postgres psql ]    [*] поменяй на одинарные ковычки
                - меняем пароль [ ALTER USER postgres with encrypted password 'postgres'; ]
                  - ставим пароль [ postgres ]
                - в [ sudo vim /etc/postgresql/9.5/main/pg_hba.conf ] ставим использование [ md5 ]
                - [ host   all         postgres    0.0.0.0/0           md5 ]
            - можем перезагрузить сервис [ sudo service postgresql restart ]
              - теперь заходим по паролю и можем попасть через [ pgadmin3 ]
                - локально [ psql -h localhost -p 5432 -U postgres ]
                - удаленно [ psql -h 192.168.56.10 -p 5432 -U postgres ]
            - создаем пользователя и базу
              - [*] посмотреть список баз [ \l ], список пользователей [ \du ]
              - пользователя и базюлю:
                [
                  (*) psql -h localhost -p 5432 -U postgres
                  create database savevideolink with encoding='UNICODE';
                  create user savevideolink with password 'savevideolink';
                  grant all privileges on database savevideolink to savevideolink;
                  (*) [ \q ] добавили строчку с пользователем [savevideolink]
                  (*) sudo service postgresql restart
                ]
            - надо попробовать удаленно приконектиться
              - [ psql -h 192.168.56.10 -p 5432 -U savevideolink ]
        ]
    - зайти в базу можно только пользователем [ sudo -i -u postgres ]
    - выйти из базы [ \q ]
    - надо создать пользователя [ man createuser ]
  - формируем первые таблицы
    - [ all_users ] данные пользователя
    - [ roles ] роли для пользователей, для разграничивания прав
    - [ all_users_roles ] это таблица связи многие ко многим таблиц (all_users <-> roles)
    - [ links ] данные о ссылке на видео
    - [ lists ] список ссылок (папка как бы)
    - [ links_lists ] это таблица связи многие ко многим таблиц (links <-> lists)
  - качаем [liquibase] -> [http://www.liquibase.org/index.html]
   - [db] -> [liquibase] (*) ver 3.5.3
     - распокавали -> удалили [lib and sdk]
     - создали папку [jdbcDriver] и скачали драйвер для [postgreSQL]
       - [ https://jdbc.postgresql.org/download/postgresql-42.1.4.jar ]
   - нужно выбрать стратегию хранения файлов [changeSet]
     - (*) выбрали, что один ченчсет на версию
     - настроиил [liqubase]
     - запустили
       - [ ./runLiquibase_savevideolink.sh jdbc:postgresql://192.168.56.10:5432 savevideolink savevideolink ]
       - видим что все прошло успешно, для [liqubase] нужно 2-е таблицы
         - [databasechangelog] и [databasechangeloglock]
   - нужно подключиться к базюли из [idea]
     - [vieu] -> [Database] -> [+] -> [postgreSQL]
     - указали параметры, жмакнули скачать драйвер, приконектились
   - сделали скрипты по накату тестовых данных и очистке таблиц
     - накат: [test_insert_1.0.0.sql]
     - удаление: [test_delete_1.0.0.sql]


5) настраиваем сервер приложений [wildfly] (*) будем дописывать тут при изменении!!!
  - у нас уже есть виртуалка [savevideolink]
  - топаем на сайт скачать сервер [http://wildfly.org]
    - [11.0.0.Final 2017-10-23 Java EE7 Full & Web Distribution]
    - качаем и кладем в [ansible/distrib/wildfly]
      - (*) не включаем в индекс, нужно прописать в [ansible] скачку и установку
      - [!] важно! так - как больше 100мб файлы заливать нельзя на [github]
    - разархивируем только на стенде! [ tar xvfz *.tar.gz ]
    - стартуем [bin/] -> [ ./standalone.sh ] (*) Java not found
      - [*] если нет [java], то ставим (пример поставить OracleJava):
          - [ sudo add-apt-repository ppa:webupd8team/java ]
          - [ sudo apt-get update ]
          - [ sudo apt-get install oracle-java8-installer ]
          - [!] указать путь
            - [ sudo update-alternatives --config java ] (*) где Java
            - [ cd /etc/enviroment ]
            - [ sudo vim /etc/environment ]
              - добавили переменную к [PATH]
              - [ JAVA_HOME="/usr/lib/jvm/java-8-oracle/" ]
        - нужно добавить юзера запустив скрипт [./add-user.sh]
          - добавляем именно [a) Management User (mgmt-users.properties)]
            - login:    root
            - password: root
          - везде [yes] или [enter]
    - запускаем [bin/] -> [ ./standalone.sh ]
      - теперь запускаем [sudo ./standalone.sh]
      - [!] чтобы со всех [ip] можно было подключиться
        - [ sudo ./standalone.sh -b=0.0.0.0 ]
        - [ sudo ./standalone.sh -bmanagement=0.0.0.0 ]
      - топаем на запущенный сервер [http://127.0.0.1:9990] (*) админка
      - топаем на запущенный сервер [http://127.0.0.1:8080] (*) приложение
  - надо в [idea] настроить удаленный сервер (*) не настроили
    - [ Edit configurations ] -> [+] -> [Jbos remote]


6) нужно настроить [spring] (*) будем дописывать тут при изменении!!!
  - топаем писать минимальный код в [savevideolink-base] это наше приложение
  - создаем иерархию пакетов [ ru.doneathome.savevideolink.base ]
  - выбирали между использование [Spring Framework] и [Spring Boot]
    - [Spring Boot]
      - похоже [Spring boot] это уже со встроенным сервачком tomcat !!
        - полуется мы получаем [jar] которая при запуске является сервером с приложением
        - поэтому смотрим как все завести просто на Спринге
      - гуглим плагин для удаленного деплоя [ wildfly maven remote deploy ]
        - плагин заработал [savevideolink-base] -> [Plugins] -> [wildfly]
      - помним что сервачек на виртуалке
        - [ cd /My/savevideolink/wildfly/wildfly-11.0.0.Final/bin ]
        - [ sudo ./standalone.sh -b=0.0.0.0 -bmanagement=0.0.0.0 ]
    - не можем получить ответ от запросса на контроллер, включаем DEBUG для лога wildfly
      [ /My/savevideolink/wildfly/wildfly-11.0.0.Final/standalone/configuration/standalone.xml ]
      - поиск подсистемы [ logging ] -> set DEBUG level (*) в нескольких местах!
      - [!] была проблемка с [Jackson] писалось что какойто класс не могли найти
        - решения подключить 3-и зависимости этой библиотеки
    - [!] варнинги на комментарии(((
      - [this inspections reports usage of the default file template for file header]
      - поправили шаблон добавлением еще одной строки [ --- ]













[?] nop
  - nop



// #nop
#-----------------------------------------------

  [!] nop

#-----------------------------------------------
